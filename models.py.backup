from app import db
from datetime import datetime
from sqlalchemy import Column, Integer, String, Text, DateTime, Enum, Float, Boolean
import enum

class WorkflowStatus(enum.Enum):
    CREATED = "Créé"
    DER_GENERATED = "DER Généré"
    DER_SENT = "DER Envoyé"
    DER_SIGNED = "DER Signé"
    DOCUMENTS_UPLOADED = "Documents Téléchargés"
    QUESTIONNAIRE_COMPLETED = "Questionnaire Complété" 
    DOCUMENTS_GENERATED = "Documents Générés"
    DOCUMENTS_SENT = "Documents Envoyés"
    DOCUMENTS_SIGNED = "Documents Signés"
    SUBSCRIPTION_SENT = "Bulletins Envoyés"
    COMPLETED = "Terminé"

class RiskTolerance(enum.Enum):
    FAIBLE = "Faible"
    MOYENNE = "Moyenne"
    ELEVEE = "Élevée"

class InvestmentHorizon(enum.Enum):
    COURT = "Court terme (< 2 ans)"
    MOYEN = "Moyen terme (2-5 ans)"
    LONG = "Long terme (> 5 ans)"

class Client(db.Model):
    __tablename__ = 'clients'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # Informations personnelles (DER)
    nom = db.Column(db.String(100), nullable=False)
    prenom = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    telephone = db.Column(db.String(20))
    date_naissance = db.Column(db.Date)
    adresse = db.Column(db.Text)
    profession = db.Column(db.String(100))
    
    # Informations financières
    revenus_mensuels = db.Column(db.Float)
    patrimoine_total = db.Column(db.Float)
    charges_mensuelles = db.Column(db.Float)
    
    # Profil investisseur (questionnaire)
    tolerance_risque = db.Column(db.Enum(RiskTolerance))
    horizon_investissement = db.Column(db.Enum(InvestmentHorizon))
    experience_financiere = db.Column(db.String(50))
    objectifs_investissement = db.Column(db.Text)
    profil_score = db.Column(db.Integer)  # Score de 1 à 7
    
    # Workflow
    statut_workflow = db.Column(db.Enum(WorkflowStatus), default=WorkflowStatus.CREATED)
    date_creation = db.Column(db.DateTime, default=datetime.utcnow)
    date_derniere_maj = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    date_entree_relation = db.Column(db.Date)
    
    # Suivi des signatures
    date_envoi_der = db.Column(db.DateTime)
    date_signature_der = db.Column(db.DateTime)
    date_envoi_documents = db.Column(db.DateTime)
    date_signature_documents = db.Column(db.DateTime)
    date_envoi_souscription = db.Column(db.DateTime)
    
    # Relations
    documents = db.relationship('Document', backref='client', lazy=True, cascade='all, delete-orphan')
    questionnaire_responses = db.relationship('QuestionnaireResponse', backref='client', lazy=True, cascade='all, delete-orphan')

class DocumentType(enum.Enum):
    # Documents KYC
    PIECE_IDENTITE = "Pièce d'identité"
    JUSTIFICATIF_DOMICILE = "Justificatif de domicile"
    AVIS_IMPOSITION = "Avis d'imposition"
    RELEVE_BANCAIRE = "Relevé bancaire"
    # Documents générés
    DER = "Document d'Entrée en Relation"
    RAPPORT_ADEQUATION = "Rapport d'adéquation"
    LETTRE_MISSION = "Lettre de mission"
    PROFIL_INVESTISSEUR = "Profil investisseur"
    KYC_DOCUMENT = "Document KYC"
    BULLETIN_SOUSCRIPTION = "Bulletin de souscription"
    AUTRE = "Autre"

class Document(db.Model):
    __tablename__ = 'documents'
    
    id = db.Column(db.Integer, primary_key=True)
    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)
    nom_fichier = db.Column(db.String(255), nullable=False)
    nom_original = db.Column(db.String(255), nullable=False)
    type_document = db.Column(db.Enum(DocumentType), nullable=False)
    chemin_fichier = db.Column(db.String(500), nullable=False)
    taille_fichier = db.Column(db.Integer)
    date_upload = db.Column(db.DateTime, default=datetime.utcnow)
    genere_automatiquement = db.Column(db.Boolean, default=False)
    # Suivi signature
    date_envoi_signature = db.Column(db.DateTime)
    date_signature = db.Column(db.DateTime)
    signe = db.Column(db.Boolean, default=False)

class QuestionnaireResponse(db.Model):
    __tablename__ = 'questionnaire_responses'
    
    id = db.Column(db.Integer, primary_key=True)
    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)
    question_id = db.Column(db.String(50), nullable=False)
    question_text = db.Column(db.Text, nullable=False)
    reponse = db.Column(db.Text, nullable=False)
    score = db.Column(db.Integer, default=0)
    date_reponse = db.Column(db.DateTime, default=datetime.utcnow)
